#! /usr/bin/env python3.5
# The MIT License (MIT)
#
# Copyright (C) 2016 Institute of Applied and Experimental Physics (http://www.utef.cvut.cz/)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import argparse
import asyncio
import base64
import datetime
import glob
import json
import os
import sys
import time
from aiohttp import web
from ieapspect import DummySpectrometer, SIPOSSpectrometer, SerSpect


class Client:

    def __init__(self, ws, master):
        self.ws = ws
        self.master = master

    def send(self, jsn):
        self.ws.send_str(json.dumps(jsn))

    def send_history(self, hist, since):
        self.send({"h": hist, "since": since})

    def send_event(self, val):
        self.send({"v": val})

    async def send_configprops(self):
        dpr = {}
        for p in self.master.spectrometer.configprops:
            dpr[p.id] = await self.master.spectrometer.get_prop(p.id)
        self.send({"props": dpr})

    async def run(self):
        js = json.loads(await self.ws.receive_str())
        if self.master.csrf_token != js["csrf"]:
            # EVIL
            print("Invalid CSRF token detected!")
            return

        self.send_history(self.master.history, self.master.since)
        await self.send_configprops()

        async for msg in self.ws:
            if msg.tp == web.MsgType.text:
                js = json.loads(msg.data)
                if js["command"] == "clear":
                    self.master.clear()
                elif js["command"] == "set":
                    cp = None
                    for x in self.master.spectrometer.configprops:
                        if x.id == js["id"]:
                            cp = x
                            break
                    if cp is None or not (cp.fr <= js["value"] <= cp.to):
                        continue
                    self.master.spectrometer.set_prop(js["id"], js["value"])
                    await self.master.broadcast_configprops()
            elif msg.tp == web.MsgType.close:
                break

class WebApp(web.Application):

    def __init__(self, spectrometer, logfile = None):
        super(WebApp, self).__init__()

        self.spectrometer = spectrometer
        self.logfile = logfile
        self.clients = []
        self.history = [0] * self.spectrometer.channels
        self.since = time.time()

        self.csrf_token = base64.b64encode(os.urandom(20)).decode()

        # WebSockets are not constrained by Same-Origin policy, this gets sent by the
        # client to configure and authenticate itself.
        metadata = {"csrf": self.csrf_token,
                    "channels": self.spectrometer.channels,
                    "driver": self.spectrometer.__class__.__name__,
                    "fw_version": self.spectrometer.fw_version,
                    "configprops": [{"id": c.id,
                                     "name": c.name,
                                     "from": c.fr,
                                     "to": c.to} for c in self.spectrometer.configprops]}

        self.metadata_json = json.dumps(metadata).encode()

        self.router.add_route("GET", "/metadata.json", self.handle_metadata)
        self.router.add_route("GET", "/data.txt", self.handle_data)
        self.router.add_route("GET", "/", self.handle_index)
        self.router.add_route("GET", "/ws", self.handle_ws)
        self.router.add_static("/", "../web")

    async def handle_metadata(self, req):
        return web.Response(body = self.metadata_json, content_type = "application/json")

    async def handle_data(self, req):
        ret = "-_-\n---\n"
        for x in self.history:
            ret += ("%d\n" % x)
        return web.Response(body = ret.encode(), content_type = "text/plain")

    async def handle_index(self, req):
        return web.HTTPFound("/index.html")

    async def handle_ws(self, req):
        ws = web.WebSocketResponse()
        await ws.prepare(req)

        cl = Client(ws, self)
        self.clients.append(cl)

        try:
            await cl.run()
        finally:
            self.clients.remove(cl)
        return ws

    def clear(self):
        self.history = [0] * self.spectrometer.channels
        self.since = time.time()
        [c.send_history(self.history, self.since) for c in self.clients]

    async def spectrometer_loop(self):
        self.clear()
        self.spectrometer.start()
        # Leak here
        fil = open(self.logfile, "w+") if self.logfile else None
        async for v in self.spectrometer:
            if v >= len(self.history): # TODO: Figure out why this is here...
                continue
            self.history[v] += 1
            self.broadcast_event(v)
            if fil:
                fil.write("%s %d\n" % (datetime.datetime.now().isoformat()[:-7], v))
                fil.flush()

    def broadcast(self, jsn):
        for c in self.clients:
            c.send(jsn)

    def broadcast_history(self, hist, since):
        for c in self.clients:
            c.send_history(hist, since)

    def broadcast_event(self, val):
        for c in self.clients:
            c.send_event(val)

    async def broadcast_configprops(self):
        # I so don't want to know what happens if more clients update their
        # config at once...
        dpr = {}
        for p in self.spectrometer.configprops:
            dpr[p.id] = await self.spectrometer.get_prop(p.id)
        for c in self.clients:
            c.send({"props": dpr})

async def main():

    parser = argparse.ArgumentParser(
        prog = "Spectrometer GUI"
    )
    parser.add_argument(
        "-s", "--serial",
        help = "Serial port to use",
        default = "/dev/ttyACM*"
    )
    parser.add_argument(
        "-t", "--type",
        help = "Spectrometer type",
        choices = ["dummy", "serial", "sipos"],
        default = "serial"
    )
    parser.add_argument(
        "-b", "--bind",
        help = "Address to bind to",
        default = "127.0.0.1"
    )
    parser.add_argument(
        "-l", "--log",
        help = "Log timestamped events into a file",
        default = None
    )

    args = parser.parse_args()

    THRESHOLD = 100

    if args.type == "dummy":
        spectrometer = DummySpectrometer(period = 0.001, chans = 4096)
    elif args.type == "serial":
        spectrometer = await SerSpect.connect(glob.glob(args.serial)[0])
        spectrometer.set_prop(SerSpect.PROP_THRESH, THRESHOLD)
        spectrometer.set_prop(SerSpect.PROP_AMP, 0)
        spectrometer.set_prop(SerSpect.PROP_BIAS, 1)
        assert await spectrometer.get_prop(SerSpect.PROP_THRESH) == THRESHOLD
    elif args.type == "sipos":
        spectrometer = await SIPOSSpectrometer.connect(glob.glob(args.serial)[0])

    app = WebApp(spectrometer, logfile = args.log)

    asyncio.ensure_future(app.spectrometer_loop())

    return lambda: web.run_app(app, port = 4000)

if __name__ == "__main__":
    fn = asyncio.get_event_loop().run_until_complete(main())
    fn()
